services:
  # ------------------------
  # Backend
  # ------------------------
  backend:
    build: ./backend
    container_name: ${BACKEND_CONTAINER_NAME}
    environment:
      - NODE_ENV=production
      - PGHOST=${PGHOST}
      - PGUSER=${PGUSER}
      - PGPASSWORD=${PGPASSWORD}
      - PGDATABASE=${PGDATABASE}
      - PGPORT=${PGPORT}
    ports:
      - "${BACKEND_PORT_HOST}:${BACKEND_PORT_CONTAINER}"
    env_file:
      - .env
    volumes:
      - ./backend/uploads:/usr/src/app/uploads
      - ./backend/config/config-routes.json:/usr/src/app/config/config-routes.json
      - ./backend/config/themes.json:/usr/src/app/config/themes.json
      - ./backend/config/config-actions.json:/usr/src/app/config/config-actions.json
      - ./backend/forms:/usr/src/app/forms


    depends_on:
      - db
    healthcheck:
      test: ["CMD-SHELL", "node -e 'require(\"http\").request({host: \"localhost\", port: 5001, path: \"/health\"}, r=>process.exit(0)).on(\"error\", ()=>process.exit(1)).end()'"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # ------------------------
  # Frontend
  # ------------------------
  frontend:
    build:
      context: ./frontend
      args:
        # Optionally set at build-time; code defaults to '/api' if unset
        VITE_API_URL: ${VITE_API_URL:-}
        # Ensure Keycloak config is baked for production builds
        VITE_KEYCLOAK_URL: ${KEYCLOAK_PORT_HOST:+http://localhost:${KEYCLOAK_PORT_HOST}}
        VITE_REALM: ${REALM:-REALM_REUNION}
        VITE_FRONT_ID: ${VITE_FRONT_ID:-react-app}
    container_name: ${FRONTEND_CONTAINER_NAME}
    ports:
      - "${FRONTEND_PORT_HOST}:${FRONTEND_PORT_CONTAINER}"
    volumes:
     - ./frontend:/app   # <-- monte ton code local dans le container
     - /app/node_modules # <-- évite d’écraser node_modules du container
    command: sh -c "npm ci && npm start -- --host 0.0.0.0 --port ${FRONTEND_PORT_HOST}:${FRONTEND_PORT_CONTAINER}"

    depends_on:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # ------------------------
  # PostgreSQL
  # ------------------------
  db:
    image: ${DB_IMAGE}
    container_name: ${DB_CONTAINER_NAME}
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB} # <-- base principale (ex: demo_first)
    ports:
      - "${DB_PORT_HOST}:${DB_PORT_CONTAINER}"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # ------------------------
  # PgAdmin
  # ------------------------
  pgadmin:
    image: ${PGADMIN_IMAGE}
    container_name: ${PGADMIN_CONTAINER_NAME}
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "${PGADMIN_PORT_HOST}:${PGADMIN_PORT_CONTAINER}"
    depends_on:
      - db
    restart: unless-stopped


  # ------------------------
  # Redis (for Activepieces)
  # ------------------------
  redis:
    image: redis:7-alpine
    container_name: redis
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # ------------------------
  # Activepieces (no-code automation)
  # ------------------------
  activepieces:
    image: ghcr.io/activepieces/activepieces:latest
    container_name: activepieces
    pull_policy: always
    environment:
      AP_POSTGRES_HOST: db
      AP_POSTGRES_PORT: 5432
      AP_POSTGRES_DATABASE: activepieces
      AP_POSTGRES_USERNAME: ${POSTGRES_USER:-postgres}
      AP_POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      AP_REDIS_URL: redis://redis:6379
      AP_ENCRYPTION_KEY: ${AP_ENCRYPTION_KEY:-0123456789abcdef0123456789abcdef}
      AP_JWT_SECRET: ${AP_JWT_SECRET:-change_me}
      AP_FRONTEND_URL: ${AP_FRONTEND_URL:-http://localhost:8082}
      AP_WEBHOOK_URL: ${AP_WEBHOOK_URL:-http://localhost:8082}
      AP_TELEMETRY_ENABLED: ${AP_TELEMETRY_ENABLED:-false}
    ports:
      - "8082:80"       # ← au lieu de 8081:80
    depends_on:
      - db
      - redis
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 10
    restart: unless-stopped


  # ------------------------
  # Keycloak (Identity & Access)
  # ------------------------
  keycloak:
    image: ${KEYCLOAK_IMAGE}
    container_name: ${KEYCLOAK_CONTAINER_NAME}
    command: start-dev --import-realm --http-port=8080 --hostname-strict=false --hostname-strict-https=false
    environment:
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KC_DB: postgres
      KC_DB_URL_HOST: db
      KC_DB_URL_PORT: 5432
      
      KC_DB_URL_DATABASE: ${KEYCLOAK_DB_NAME}
      KC_DB_USERNAME: ${KEYCLOAK_DB_USER}
      KC_DB_PASSWORD: ${KEYCLOAK_DB_PASSWORD}
      # Important : forcer Keycloak à rester en HTTP même si un proxy est devant
      KC_HOSTNAME_STRICT: "false"
      KC_HOSTNAME_STRICT_HTTPS: "false"
      KC_HTTP_ENABLED: "true"
      KC_HTTP_PORT: "8080"
      KC_HTTPS_PORT: "0"
       # <<< Keycloak publie "localhost:8081"
      KC_HOSTNAME_URL: "http://localhost:8081"
      KC_HOSTNAME_ADMIN_URL: "http://localhost:8081"
      
    volumes:
      - ./authentification:/opt/keycloak/data/import:ro
      - ./themes:/opt/keycloak/themes
    ports:
      - "${KEYCLOAK_PORT_HOST}:${KEYCLOAK_PORT_CONTAINER}"
    env_file:
      - ./.env
    depends_on:
      - db
    restart: unless-stopped

  flowable-ui:
    image: flowable/flowable-ui:latest
    container_name: flowable-ui
    ports:
    - "8099:8080"     # UI: http://localhost:8099/flowable-ui
    environment:
    # Base de données (PostgreSQL côté service "db")
     SPRING_DATASOURCE_DRIVER_CLASS_NAME: org.postgresql.Driver
     SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/flowable
     SPRING_DATASOURCE_USERNAME: flowable
     SPRING_DATASOURCE_PASSWORD: flowable

    # Désactiver OIDC et utiliser l'IDM embarqué (login interne)
     FLOWABLE_COMMON_APP_SECURITY_TYPE: idm
     FLOWABLE_COMMON_APP_IDM_ENABLED: "true"
    depends_on:
     - db
    restart: unless-stopped

  jbpm-bc:
    image: quay.io/kiegroup/business-central-workbench-showcase:7.73.0.Final
    container_name: jbpm-bc
    ports: ["8085:8080"]
    environment:
      - KIE_SERVER_USER=kieserver
      - KIE_SERVER_PWD=kieserver1!
    restart: unless-stopped

  jbpm-kieserver:
    image: quay.io/kiegroup/kie-server-showcase:7.73.0.Final
    container_name: jbpm-kieserver
    depends_on: [jbpm-bc]
    ports: ["8185:8080"]   # pratique pour tester en local
    environment:
      - KIE_SERVER_ID=local-kie
      - KIE_SERVER_LOCATION=http://jbpm-kieserver:8080/kie-server/services/rest/server
      - KIE_SERVER_CONTROLLER=http://jbpm-bc:8080/business-central/rest/controller
      - KIE_SERVER_CONTROLLER_USER=kieserver
      - KIE_SERVER_CONTROLLER_PWD=kieserver1!
    restart: unless-stopped






volumes:
  postgres_data:
  uploads_data:
