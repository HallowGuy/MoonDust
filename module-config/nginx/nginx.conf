# NGINX as a reverse proxy with Keycloak authentication
user nginx;
worker_processes auto;

error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    # Hide NGINX version and server headers
    server_tokens off;

    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Access log
    access_log /var/log/nginx/access.log combined;

    # Gzip compression
    gzip on;
    gzip_comp_level 5;
    gzip_min_length 256;
    gzip_proxied any;
    gzip_vary on;
    gzip_types
        text/plain
        text/css
        application/json
        application/javascript
        text/xml
        application/xml
        application/xml+rss
        text/javascript;

    # Internal DNS for Docker
    upstream keycloak {
        server keycloak:8080;
    }

    server {
        listen 80 default_server;
        server_name _;

        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;
        add_header Permissions-Policy "geolocation=(), microphone=()" always;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        add_header Server "";  # Hides 'Server: nginx'

        # Custom error pages
        error_page 400 /400.html;
        error_page 401 /401.html;
        error_page 403 /403.html;
        error_page 404 /404.html;
        error_page 500 502 503 504 /500.html;

        location = /400.html {
            root /usr/share/nginx/html;
        }

        location = /401.html {
            root /usr/share/nginx/html;
        }

        location = /403.html {
            root /usr/share/nginx/html;
        }

        location = /404.html {
            root /usr/share/nginx/html;
        }

        location = /500.html {
            root /usr/share/nginx/html;
        }

        ##################################
        # Proxy to Keycloak (for /realms/*)
        ##################################
        location /realms/ {
            proxy_pass http://keycloak;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_intercept_errors on;  # Show friendly error pages on 404/500
        }

        ##################################
        # Protected content (auth via Keycloak)
        ##################################
        location / {
            auth_request /auth;
            # Redirect unauthenticated users through the same host to Keycloak
            error_page 401 =302 /realms/example/protocol/openid-connect/auth?client_id=example-client&redirect_uri=$scheme://$host$request_uri;

            root /usr/share/nginx/html;
            index index.html;
        }

        ##################################
        # Internal endpoint: Keycloak token check
        ##################################
        location = /auth {
            internal;

            proxy_pass http://keycloak/realms/example/protocol/openid-connect/userinfo;
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";
            proxy_set_header Authorization $http_authorization;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_intercept_errors on;
        }
    }
}
