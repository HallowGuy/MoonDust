# Basic NGINX configuration acting as a reverse proxy with upstream definitions

worker_processes 1;

events {
    worker_connections 1024;
}

http {
    # Define upstream backends for Docker-resolvable services
    upstream frontend {
        server frontend:4200;
    }

    upstream backend {
        server backend:8080;
    }

    upstream keycloak {
        server keycloak:8080;
    }

    server {
        listen 80;

        #########################
        # Proxy: Angular Frontend
        #########################
        location / {
            auth_request /auth;
            error_page 401 =302 http://keycloak/realms/master/protocol/openid-connect/auth?client_id=example-client&redirect_uri=$scheme://$host$request_uri;
            proxy_pass http://frontend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }

        ##################################
        # Internal Endpoint: Keycloak Auth
        ##################################
        location = /auth {
            internal;
            proxy_pass http://keycloak/realms/master/protocol/openid-connect/userinfo;
            proxy_pass_request_body off;
            proxy_set_header Authorization $http_authorization;
        }

        ##############################
        # Proxy: Backend API Requests
        ##############################
        location /api/ {
            auth_request /auth;
            error_page 401 =302 http://keycloak/realms/master/protocol/openid-connect/auth?client_id=example-client&redirect_uri=$scheme://$host$request_uri;
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }
    }
}
