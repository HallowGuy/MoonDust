-- This script was generated by pgAdmin ERD tool and amélioré manuellement
-- Pour reporter un bug : https://github.com/pgadmin-org/pgadmin4/issues/new/choose
BEGIN;

-- Schéma
CREATE SCHEMA IF NOT EXISTS demo_first;
SET search_path TO demo_first, public;

-- Fonction utilitaire : mise à jour automatique du champ updated_at
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

---------------------------------------------------
-- USERS
---------------------------------------------------
CREATE TABLE IF NOT EXISTS demo_first.users (
    id BIGSERIAL PRIMARY KEY,
    username VARCHAR(80) UNIQUE NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    display_name VARCHAR(120),
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);
CREATE INDEX IF NOT EXISTS idx_users_email ON demo_first.users(email);
CREATE INDEX IF NOT EXISTS idx_users_username ON demo_first.users(username);

---------------------------------------------------
-- ROLES
---------------------------------------------------
CREATE TABLE IF NOT EXISTS demo_first.roles (
    id BIGSERIAL PRIMARY KEY,
    code VARCHAR(50) UNIQUE NOT NULL,
    label VARCHAR(120) NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

---------------------------------------------------
-- USER_ROLES (N:N)
---------------------------------------------------
CREATE TABLE IF NOT EXISTS demo_first.user_roles (
    user_id BIGINT NOT NULL REFERENCES demo_first.users(id) ON DELETE CASCADE,
    role_id BIGINT NOT NULL REFERENCES demo_first.roles(id) ON DELETE CASCADE,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    PRIMARY KEY (user_id, role_id)
);

---------------------------------------------------
-- DOCUMENTS
---------------------------------------------------
CREATE TABLE IF NOT EXISTS demo_first.documents (
    id BIGSERIAL PRIMARY KEY,
    owner_user_id BIGINT NOT NULL REFERENCES demo_first.users(id) ON DELETE CASCADE,
    name VARCHAR(255) NOT NULL,
    extension VARCHAR(16),
    size_bytes BIGINT CHECK (size_bytes >= 0),
    mime_type VARCHAR(255),
    status VARCHAR(32) DEFAULT 'DRAFT',
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);
CREATE INDEX IF NOT EXISTS idx_documents_owner_user_id ON demo_first.documents(owner_user_id);
CREATE INDEX IF NOT EXISTS idx_documents_status ON demo_first.documents(status);

---------------------------------------------------
-- DOCUMENT_VERSIONS
---------------------------------------------------
CREATE TABLE IF NOT EXISTS demo_first.document_versions (
    id BIGSERIAL PRIMARY KEY,
    document_id BIGINT NOT NULL REFERENCES demo_first.documents(id) ON DELETE CASCADE,
    version_no INT NOT NULL CHECK (version_no >= 1),
    storage_uri TEXT NOT NULL,
    checksum_sha256 CHAR(64),
    created_at TIMESTAMPTZ DEFAULT NOW(),
    UNIQUE (document_id, version_no)
);
CREATE INDEX IF NOT EXISTS idx_document_versions_doc_version ON demo_first.document_versions(document_id, version_no);

---------------------------------------------------
-- TAGS
---------------------------------------------------
CREATE TABLE IF NOT EXISTS demo_first.tags (
    id BIGSERIAL PRIMARY KEY,
    name VARCHAR(64) UNIQUE NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW()
);
CREATE INDEX IF NOT EXISTS idx_tags_name ON demo_first.tags(name);

---------------------------------------------------
-- DOCUMENT_TAGS (N:N)
---------------------------------------------------
CREATE TABLE IF NOT EXISTS demo_first.document_tags (
    document_id BIGINT NOT NULL REFERENCES demo_first.documents(id) ON DELETE CASCADE,
    tag_id BIGINT NOT NULL REFERENCES demo_first.tags(id) ON DELETE CASCADE,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    PRIMARY KEY (document_id, tag_id)
);

---------------------------------------------------
-- AUDIT_LOG
---------------------------------------------------
CREATE TABLE IF NOT EXISTS demo_first.audit_log (
    id BIGSERIAL PRIMARY KEY,
    actor_user_id BIGINT REFERENCES demo_first.users(id) ON DELETE SET NULL,
    entity_type VARCHAR(64) NOT NULL,
    entity_id BIGINT NOT NULL,
    action VARCHAR(64) NOT NULL,
    meta JSONB,
    occurred_at TIMESTAMPTZ DEFAULT NOW()
);
CREATE INDEX IF NOT EXISTS idx_audit_log_entity ON demo_first.audit_log(entity_type, entity_id);
CREATE INDEX IF NOT EXISTS idx_audit_log_occurred_at ON demo_first.audit_log(occurred_at);

---------------------------------------------------
-- LEAVE_REQUESTS
---------------------------------------------------
CREATE TABLE IF NOT EXISTS demo_first.leave_requests (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(255) NOT NULL,
    start_date DATE NOT NULL,
    end_date DATE NOT NULL,
    reason TEXT,
    status VARCHAR(20) DEFAULT 'EN ATTENTE',
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

---------------------------------------------------
-- PUBLIC : CONVERSATIONS (messagerie)
---------------------------------------------------
CREATE TABLE IF NOT EXISTS public.conversations (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    is_group BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT NOW()
);

CREATE TABLE IF NOT EXISTS public.conversation_participants (
    conversation_id UUID NOT NULL REFERENCES public.conversations(id) ON DELETE CASCADE,
    user_id UUID NOT NULL,
    PRIMARY KEY (conversation_id, user_id)
);

CREATE TABLE IF NOT EXISTS public.messages (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    conversation_id UUID REFERENCES public.conversations(id) ON DELETE CASCADE,
    sender_id UUID NOT NULL,
    content TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT NOW()
);

CREATE TABLE IF NOT EXISTS public.message_reads (
    message_id UUID NOT NULL REFERENCES public.messages(id) ON DELETE CASCADE,
    user_id UUID NOT NULL,
    read_at TIMESTAMP DEFAULT NOW(),
    PRIMARY KEY (message_id, user_id)
);

---------------------------------------------------
-- PUBLIC : KEYCLOAK_USERS
---------------------------------------------------
CREATE TABLE IF NOT EXISTS public.keycloak_users (
    id UUID PRIMARY KEY,
    username VARCHAR(255) NOT NULL,
    email VARCHAR(255)
);

---------------------------------------------------
-- Triggers de mise à jour automatique des updated_at
---------------------------------------------------
CREATE TRIGGER trg_users_updated_at
BEFORE UPDATE ON demo_first.users
FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER trg_roles_updated_at
BEFORE UPDATE ON demo_first.roles
FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER trg_documents_updated_at
BEFORE UPDATE ON demo_first.documents
FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

END;
